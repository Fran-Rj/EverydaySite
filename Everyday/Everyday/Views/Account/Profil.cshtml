@model Everyday.Models.Usuario

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #nameUser, #gender, #email, #keyUser, select, textarea {
        max-width: 400px;
    }

    label {
        font-weight: bold;
    }

    #btnX {
        position:absolute;
        top: 15%;
        left: 90%;
        transform:translate(-15% -90%)
    }

    #btnBack {
        text-decoration: none;
        font-weight: bold;
    }
</style>

<br />
<div class="container" style="margin: auto;">
    <br />
    <div style="justify-content:center;  display:flex; background-color: transparent">
        <div>
            @using (Html.BeginForm("ChangeImage", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.HiddenFor(model => model.idUser)
                <div style="background-color: transparent; padding: 10px; text-align:center;">
                    <div>
                        <img id="imgUser" src="@Url.Action("MostrarImagen", "Account", new { Id = Model.idUser })" style="border-radius:7px; width:250px; height: 250px;" alt="None..." />
                        <br /><br />
                        <input id="uploadImg" type="file" name="File" />
                        <br /><br />
                        <input type="submit" class="btn btn-success g-lg-4" value="Aplicar" />
                    </div>
                </div>
            }
        </div>
        <div style="background-color: transparent; margin-left: 200px; width: 400px; padding: 10px;">
            @using (Html.BeginForm("Profil", "Account", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.idUser)

                    <div>
                        <label>Usuario</label>
                        <div>
                            @Html.EditorFor(model => model.nameUser, new { htmlAttributes = new { required = "", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.nameUser, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div>
                        <label>Género</label>
                        <div>
                            @Html.EditorFor(model => model.gender, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.gender, "", new { required = "", @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div>
                        <label>Correo</label>
                        <div>
                            @Html.EditorFor(model => model.email, new { htmlAttributes = new { required = "", type = "email", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div>
                        <label>Contraseña</label>
                        <div>
                            @Html.EditorFor(model => model.keyUser, new { htmlAttributes = new { required = "", type = "password", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.keyUser, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div style="text-align:center;">
                        <div>
                            <input type="submit" value="Guardar" class="btn btn-success" />
                        </div>
                    </div>
                    <br />
                </div>
            }
        </div>
    </div>
    <div id="btnX">
        @Html.ActionLink("x", "Home", "Home", null, new { id = "btnBack" })
    </div>
</div>

<script>
    const input = document.getElementById('uploadImg');
    const img = document.getElementById('imgUser');

    input.addEventListener('change', () => {
        const file = input.files[0];
        const reader = new FileReader();

        reader.addEventListener('load', () => {
            img.src = reader.result;
        });

        reader.readAsDataURL(file);
    });
</script>