@model Everyday.Models.Producto

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #btnX {
        position: absolute;
        top: 16%;
        left: 93%;
        transform: translate(-16% -93%)
    }

    #btnBack {
        text-decoration: none;
        font-weight: bold;
    }
</style>

<br />
<div style="margin:auto; border-radius: 10px; justify-content:space-between; display:flex; background-color:transparent;" class="container">

    @using (Html.BeginForm("ChangeImage", "Producto", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(model => model.idProd)
        <div id="box-img" style="text-align: center; background-color: transparent; padding: 10px; width:400px; height: 500px">
            <div>
                <img id="imgProd" src="@Url.Action("MostrarImagen",  "Producto", new { Id = Model.idProd })" style="border-radius:10px; width: 350px; height:350px;" alt="None..." />
            </div>
            <br />
            <div id="box-btnFile">
                <input id="uploadImg" type="file" name="File" />
            </div>
            <br />
            <input type="submit" class="btn btn-success g-lg-4" value="Aplicar" />
        </div>
    }


    @using ((Html.BeginForm("Edit", "Producto", FormMethod.Post)))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.idProd)
        <br />
        <div style="justify-content: center; display: flex; background-color: transparent; width: 650px; height: 500px;">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div style="justify-content:space-between; width: 400px; height: 400px; border-radius: 7px; background-color: transparent;">
                <div>
                    <label>Nombre</label>
                    <div>
                        @Html.EditorFor(model => model.nameProd, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.nameProd, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    <br />
                    <label>Descripción</label>
                    <div>
                        @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    <br />
                    <label>Precio</label>
                    <div>
                        @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    <br />
                    <label>Stock</label>
                    <div>
                        @Html.EditorFor(model => model.stock, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.stock, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div style="background-color: transparent; border-radius: 7px; width: 400px; height: 400px; ">
                <div>
                    <label>Tipo</label>
                    <div>
                        @Html.DropDownList("idType", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.idType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    <br />
                    <label>Marca</label>
                    <div>
                        @Html.DropDownList("idMarc", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.idMarc, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div style="background-color: transparent;">
                    <br />
                    <label>Categoria</label>
                    <div>
                        @Html.DropDownList("idCateg", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.idCateg, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    <br />
                    <label>Estado</label>
                    <div>
                        @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div style="padding:15px; margin-top:-100px; justify-content:center; display: flex;">
            <div>
                <input type="submit" value="Actualizar" class="btn btn-success" />
            </div>
        </div>
        <div id="btnX">
            @Html.ActionLink("x", "Index", null, htmlAttributes: new { id = "btnBack" })
        </div>
    }
</div>

<script>
    const input = document.getElementById('uploadImg');
    const img = document.getElementById('imgProd');

    input.addEventListener('change', () => {
        const file = input.files[0];
        const reader = new FileReader();

        reader.addEventListener('load', () => {
            img.src = reader.result;
        });

        reader.readAsDataURL(file);
    });
</script>